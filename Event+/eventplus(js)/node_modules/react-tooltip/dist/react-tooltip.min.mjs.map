{"version":3,"file":"react-tooltip.min.mjs","sources":["../src/utils/handle-style.ts","../src/utils/debounce.ts","../src/components/TooltipProvider/TooltipProvider.tsx","../src/components/TooltipProvider/TooltipWrapper.tsx","../src/utils/use-isomorphic-layout-effect.ts","../src/utils/get-scroll-parent.ts","../src/utils/compute-positions.ts","../src/components/Tooltip/Tooltip.tsx","../src/components/TooltipContent/TooltipContent.tsx","../src/components/TooltipController/TooltipController.tsx","../src/index.tsx"],"sourcesContent":["// This is the ID for the core styles of ReactTooltip\nconst REACT_TOOLTIP_CORE_STYLES_ID = 'react-tooltip-core-styles'\n// This is the ID for the visual styles of ReactTooltip\nconst REACT_TOOLTIP_BASE_STYLES_ID = 'react-tooltip-base-styles'\n\nconst injected = {\n  core: false,\n  base: false,\n}\n\nfunction injectStyle({\n  css,\n  id = REACT_TOOLTIP_BASE_STYLES_ID,\n  type = 'base',\n  ref,\n}: {\n  css: string\n  id?: string\n  type?: 'core' | 'base'\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  ref?: any\n}) {\n  if (!css || typeof document === 'undefined' || injected[type]) {\n    return\n  }\n\n  if (\n    type === 'core' &&\n    typeof process !== 'undefined' && // this validation prevents docs from breaking even with `process?`\n    process?.env?.REACT_TOOLTIP_DISABLE_CORE_STYLES\n  ) {\n    return\n  }\n\n  if (\n    type !== 'base' &&\n    typeof process !== 'undefined' && // this validation prevents docs from breaking even with `process?`\n    process?.env?.REACT_TOOLTIP_DISABLE_BASE_STYLES\n  ) {\n    return\n  }\n\n  if (type === 'core') {\n    // eslint-disable-next-line no-param-reassign\n    id = REACT_TOOLTIP_CORE_STYLES_ID\n  }\n\n  if (!ref) {\n    // eslint-disable-next-line no-param-reassign\n    ref = {}\n  }\n  const { insertAt } = ref\n\n  if (document.getElementById(id)) {\n    // this should never happen because of `injected[type]`\n    if (process.env.NODE_ENV !== 'production') {\n      // eslint-disable-next-line no-console\n      console.warn(\n        `[react-tooltip] Element with id '${id}' already exists. Call \\`removeStyle()\\` first`,\n      )\n    }\n    return\n  }\n\n  const head = document.head || document.getElementsByTagName('head')[0]\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  const style: any = document.createElement('style')\n  style.id = id\n  style.type = 'text/css'\n\n  if (insertAt === 'top') {\n    if (head.firstChild) {\n      head.insertBefore(style, head.firstChild)\n    } else {\n      head.appendChild(style)\n    }\n  } else {\n    head.appendChild(style)\n  }\n\n  if (style.styleSheet) {\n    style.styleSheet.cssText = css\n  } else {\n    style.appendChild(document.createTextNode(css))\n  }\n\n  injected[type] = true\n}\n\n/**\n * @deprecated Use the `disableStyleInjection` tooltip prop instead.\n * See https://react-tooltip.com/docs/examples/styling#disabling-reacttooltip-css\n */\nfunction removeStyle({\n  type = 'base',\n  id = REACT_TOOLTIP_BASE_STYLES_ID,\n}: {\n  type?: 'core' | 'base'\n  id?: string\n} = {}) {\n  if (!injected[type]) {\n    return\n  }\n\n  if (type === 'core') {\n    // eslint-disable-next-line no-param-reassign\n    id = REACT_TOOLTIP_CORE_STYLES_ID\n  }\n\n  const style = document.getElementById(id)\n  if (style?.tagName === 'style') {\n    style?.remove()\n  } else if (process.env.NODE_ENV !== 'production') {\n    // eslint-disable-next-line no-console\n    console.warn(\n      `[react-tooltip] Failed to remove 'style' element with id '${id}'. Call \\`injectStyle()\\` first`,\n    )\n  }\n\n  injected[type] = false\n}\n\nexport { injectStyle, removeStyle }\n","/* eslint-disable @typescript-eslint/no-explicit-any */\n/**\n * This function debounce the received function\n * @param { function } \tfunc\t\t\t\tFunction to be debounced\n * @param { number } \t\twait\t\t\t\tTime to wait before execut the function\n * @param { boolean } \timmediate\t\tParam to define if the function will be executed immediately\n */\nconst debounce = (func: (...args: any[]) => void, wait?: number, immediate?: boolean) => {\n  let timeout: NodeJS.Timeout | null = null\n\n  return function debounced(this: typeof func, ...args: any[]) {\n    const later = () => {\n      timeout = null\n      if (!immediate) {\n        func.apply(this, args)\n      }\n    }\n\n    if (immediate && !timeout) {\n      /**\n       * there's not need to clear the timeout\n       * since we expect it to resolve and set `timeout = null`\n       */\n      func.apply(this, args)\n      timeout = setTimeout(later, wait)\n    }\n\n    if (!immediate) {\n      if (timeout) {\n        clearTimeout(timeout)\n      }\n      timeout = setTimeout(later, wait)\n    }\n  }\n}\n\nexport default debounce\n","import React, {\n  createContext,\n  PropsWithChildren,\n  useCallback,\n  useContext,\n  useMemo,\n  useState,\n} from 'react'\n\nimport type {\n  AnchorRef,\n  TooltipContextData,\n  TooltipContextDataWrapper,\n} from './TooltipProviderTypes'\n\nconst DEFAULT_TOOLTIP_ID = 'DEFAULT_TOOLTIP_ID'\nconst DEFAULT_CONTEXT_DATA: TooltipContextData = {\n  anchorRefs: new Set(),\n  activeAnchor: { current: null },\n  attach: () => {\n    /* attach anchor element */\n  },\n  detach: () => {\n    /* detach anchor element */\n  },\n  setActiveAnchor: () => {\n    /* set active anchor */\n  },\n}\n\nconst DEFAULT_CONTEXT_DATA_WRAPPER: TooltipContextDataWrapper = {\n  getTooltipData: () => DEFAULT_CONTEXT_DATA,\n}\n\nconst TooltipContext = createContext<TooltipContextDataWrapper>(DEFAULT_CONTEXT_DATA_WRAPPER)\n\n/**\n * @deprecated Use the `data-tooltip-id` attribute, or the `anchorSelect` prop instead.\n * See https://react-tooltip.com/docs/getting-started\n */\nconst TooltipProvider: React.FC<PropsWithChildren<void>> = ({ children }) => {\n  const [anchorRefMap, setAnchorRefMap] = useState<Record<string, Set<AnchorRef>>>({\n    [DEFAULT_TOOLTIP_ID]: new Set(),\n  })\n  const [activeAnchorMap, setActiveAnchorMap] = useState<Record<string, AnchorRef>>({\n    [DEFAULT_TOOLTIP_ID]: { current: null },\n  })\n\n  const attach = (tooltipId: string, ...refs: AnchorRef[]) => {\n    setAnchorRefMap((oldMap) => {\n      const tooltipRefs = oldMap[tooltipId] ?? new Set()\n      refs.forEach((ref) => tooltipRefs.add(ref))\n      // create new object to trigger re-render\n      return { ...oldMap, [tooltipId]: new Set(tooltipRefs) }\n    })\n  }\n\n  const detach = (tooltipId: string, ...refs: AnchorRef[]) => {\n    setAnchorRefMap((oldMap) => {\n      const tooltipRefs = oldMap[tooltipId]\n      if (!tooltipRefs) {\n        // tooltip not found\n        // maybe thow error?\n        return oldMap\n      }\n      refs.forEach((ref) => tooltipRefs.delete(ref))\n      // create new object to trigger re-render\n      return { ...oldMap }\n    })\n  }\n\n  const setActiveAnchor = (tooltipId: string, ref: React.RefObject<HTMLElement>) => {\n    setActiveAnchorMap((oldMap) => {\n      if (oldMap[tooltipId]?.current === ref.current) {\n        return oldMap\n      }\n      // create new object to trigger re-render\n      return { ...oldMap, [tooltipId]: ref }\n    })\n  }\n\n  const getTooltipData = useCallback(\n    (tooltipId = DEFAULT_TOOLTIP_ID) => ({\n      anchorRefs: anchorRefMap[tooltipId] ?? new Set(),\n      activeAnchor: activeAnchorMap[tooltipId] ?? { current: null },\n      attach: (...refs: AnchorRef[]) => attach(tooltipId, ...refs),\n      detach: (...refs: AnchorRef[]) => detach(tooltipId, ...refs),\n      setActiveAnchor: (ref: AnchorRef) => setActiveAnchor(tooltipId, ref),\n    }),\n    [anchorRefMap, activeAnchorMap, attach, detach],\n  )\n\n  const context = useMemo(() => {\n    return {\n      getTooltipData,\n    }\n  }, [getTooltipData])\n\n  return <TooltipContext.Provider value={context}>{children}</TooltipContext.Provider>\n}\n\nexport function useTooltip(tooltipId = DEFAULT_TOOLTIP_ID) {\n  return useContext(TooltipContext).getTooltipData(tooltipId)\n}\n\nexport default TooltipProvider\n","import React, { useEffect, useRef } from 'react'\nimport classNames from 'classnames'\nimport { useTooltip } from './TooltipProvider'\nimport type { ITooltipWrapper } from './TooltipProviderTypes'\n\n/**\n * @deprecated Use the `data-tooltip-id` attribute, or the `anchorSelect` prop instead.\n * See https://react-tooltip.com/docs/getting-started\n */\nconst TooltipWrapper = ({\n  tooltipId,\n  children,\n  className,\n  place,\n  content,\n  html,\n  variant,\n  offset,\n  wrapper,\n  events,\n  positionStrategy,\n  delayShow,\n  delayHide,\n}: ITooltipWrapper) => {\n  const { attach, detach } = useTooltip(tooltipId)\n  const anchorRef = useRef<HTMLElement | null>(null)\n\n  useEffect(() => {\n    attach(anchorRef)\n    return () => {\n      detach(anchorRef)\n    }\n  }, [])\n\n  return (\n    <span\n      ref={anchorRef}\n      className={classNames('react-tooltip-wrapper', className)}\n      data-tooltip-place={place}\n      data-tooltip-content={content}\n      data-tooltip-html={html}\n      data-tooltip-variant={variant}\n      data-tooltip-offset={offset}\n      data-tooltip-wrapper={wrapper}\n      data-tooltip-events={events}\n      data-tooltip-position-strategy={positionStrategy}\n      data-tooltip-delay-show={delayShow}\n      data-tooltip-delay-hide={delayHide}\n    >\n      {children}\n    </span>\n  )\n}\n\nexport default TooltipWrapper\n","import { useLayoutEffect, useEffect } from 'react'\n\nconst useIsomorphicLayoutEffect = typeof window !== 'undefined' ? useLayoutEffect : useEffect\n\nexport default useIsomorphicLayoutEffect\n","const isScrollable = (node: Element) => {\n  if (!(node instanceof HTMLElement || node instanceof SVGElement)) {\n    return false\n  }\n  const style = getComputedStyle(node)\n  return ['overflow', 'overflow-x', 'overflow-y'].some((propertyName) => {\n    const value = style.getPropertyValue(propertyName)\n    return value === 'auto' || value === 'scroll'\n  })\n}\n\nexport const getScrollParent = (node: Element | null) => {\n  if (!node) {\n    return null\n  }\n  let currentParent = node.parentElement\n  while (currentParent) {\n    if (isScrollable(currentParent)) {\n      return currentParent\n    }\n    currentParent = currentParent.parentElement\n  }\n  return document.scrollingElement || document.documentElement\n}\n","import { computePosition, offset, shift, arrow, flip } from '@floating-ui/dom'\nimport type { IComputePositions } from './compute-positions-types'\n\nexport const computeTooltipPosition = async ({\n  elementReference = null,\n  tooltipReference = null,\n  tooltipArrowReference = null,\n  place = 'top',\n  offset: offsetValue = 10,\n  strategy = 'absolute',\n  middlewares = [offset(Number(offsetValue)), flip(), shift({ padding: 5 })],\n  border,\n}: IComputePositions) => {\n  if (!elementReference) {\n    // elementReference can be null or undefined and we will not compute the position\n    // eslint-disable-next-line no-console\n    // console.error('The reference element for tooltip was not defined: ', elementReference)\n    return { tooltipStyles: {}, tooltipArrowStyles: {}, place }\n  }\n\n  if (tooltipReference === null) {\n    return { tooltipStyles: {}, tooltipArrowStyles: {}, place }\n  }\n\n  const middleware = middlewares\n\n  if (tooltipArrowReference) {\n    middleware.push(arrow({ element: tooltipArrowReference as HTMLElement, padding: 5 }))\n\n    return computePosition(elementReference as HTMLElement, tooltipReference as HTMLElement, {\n      placement: place,\n      strategy,\n      middleware,\n    }).then(({ x, y, placement, middlewareData }) => {\n      const styles = { left: `${x}px`, top: `${y}px`, border }\n\n      const { x: arrowX, y: arrowY } = middlewareData.arrow ?? { x: 0, y: 0 }\n\n      const staticSide =\n        {\n          top: 'bottom',\n          right: 'left',\n          bottom: 'top',\n          left: 'right',\n        }[placement.split('-')[0]] ?? 'bottom'\n\n      const borderSide = border && {\n        borderBottom: border,\n        borderRight: border,\n      }\n\n      let borderWidth = 0\n      if (border) {\n        const match = `${border}`.match(/(\\d+)px/)\n        if (match?.[1]) {\n          borderWidth = Number(match[1])\n        } else {\n          /**\n           * this means `border` was set without `width`, or non-px value\n           */\n          borderWidth = 1\n        }\n      }\n\n      const arrowStyle = {\n        left: arrowX != null ? `${arrowX}px` : '',\n        top: arrowY != null ? `${arrowY}px` : '',\n        right: '',\n        bottom: '',\n        ...borderSide,\n        [staticSide]: `-${4 + borderWidth}px`,\n      }\n\n      return { tooltipStyles: styles, tooltipArrowStyles: arrowStyle, place: placement }\n    })\n  }\n\n  return computePosition(elementReference as HTMLElement, tooltipReference as HTMLElement, {\n    placement: 'bottom',\n    strategy,\n    middleware,\n  }).then(({ x, y, placement }) => {\n    const styles = { left: `${x}px`, top: `${y}px` }\n\n    return { tooltipStyles: styles, tooltipArrowStyles: {}, place: placement }\n  })\n}\n","import React, { useEffect, useState, useRef, useCallback } from 'react'\nimport { autoUpdate } from '@floating-ui/dom'\nimport classNames from 'classnames'\nimport debounce from 'utils/debounce'\nimport { useTooltip } from 'components/TooltipProvider'\nimport useIsomorphicLayoutEffect from 'utils/use-isomorphic-layout-effect'\nimport { getScrollParent } from 'utils/get-scroll-parent'\nimport { computeTooltipPosition } from 'utils/compute-positions'\nimport coreStyles from './core-styles.module.css'\nimport styles from './styles.module.css'\nimport type {\n  AnchorCloseEvents,\n  AnchorOpenEvents,\n  GlobalCloseEvents,\n  IPosition,\n  ITooltip,\n  PlacesType,\n} from './TooltipTypes'\n\nconst Tooltip = ({\n  // props\n  id,\n  className,\n  classNameArrow,\n  variant = 'dark',\n  anchorId,\n  anchorSelect,\n  place = 'top',\n  offset = 10,\n  events = ['hover'],\n  openOnClick = false,\n  positionStrategy = 'absolute',\n  middlewares,\n  wrapper: WrapperElement,\n  delayShow = 0,\n  delayHide = 0,\n  float = false,\n  hidden = false,\n  noArrow = false,\n  clickable = false,\n  closeOnEsc = false,\n  closeOnScroll = false,\n  closeOnResize = false,\n  openEvents,\n  closeEvents,\n  globalCloseEvents,\n  style: externalStyles,\n  position,\n  afterShow,\n  afterHide,\n  // props handled by controller\n  content,\n  contentWrapperRef,\n  isOpen,\n  setIsOpen,\n  activeAnchor,\n  setActiveAnchor,\n  border,\n  opacity,\n  arrowColor,\n}: ITooltip) => {\n  const tooltipRef = useRef<HTMLElement>(null)\n  const tooltipArrowRef = useRef<HTMLElement>(null)\n  const tooltipShowDelayTimerRef = useRef<NodeJS.Timeout | null>(null)\n  const tooltipHideDelayTimerRef = useRef<NodeJS.Timeout | null>(null)\n  const [actualPlacement, setActualPlacement] = useState(place)\n  const [inlineStyles, setInlineStyles] = useState({})\n  const [inlineArrowStyles, setInlineArrowStyles] = useState({})\n  const [show, setShow] = useState(false)\n  const [rendered, setRendered] = useState(false)\n  const wasShowing = useRef(false)\n  const lastFloatPosition = useRef<IPosition | null>(null)\n  /**\n   * @todo Remove this in a future version (provider/wrapper method is deprecated)\n   */\n  const { anchorRefs, setActiveAnchor: setProviderActiveAnchor } = useTooltip(id)\n  const hoveringTooltip = useRef(false)\n  const [anchorsBySelect, setAnchorsBySelect] = useState<HTMLElement[]>([])\n  const mounted = useRef(false)\n\n  /**\n   * @todo Update when deprecated stuff gets removed.\n   */\n  const shouldOpenOnClick = openOnClick || events.includes('click')\n  const hasClickEvent =\n    shouldOpenOnClick || openEvents?.click || openEvents?.dblclick || openEvents?.mousedown\n  const actualOpenEvents: AnchorOpenEvents = openEvents\n    ? { ...openEvents }\n    : {\n        mouseenter: true,\n        focus: true,\n        click: false,\n        dblclick: false,\n        mousedown: false,\n      }\n  if (!openEvents && shouldOpenOnClick) {\n    Object.assign(actualOpenEvents, {\n      mouseenter: false,\n      focus: false,\n      click: true,\n    })\n  }\n  const actualCloseEvents: AnchorCloseEvents = closeEvents\n    ? { ...closeEvents }\n    : {\n        mouseleave: true,\n        blur: true,\n        click: false,\n      }\n  if (!closeEvents && shouldOpenOnClick) {\n    Object.assign(actualCloseEvents, {\n      mouseleave: false,\n      blur: false,\n    })\n  }\n  const actualGlobalCloseEvents: GlobalCloseEvents = globalCloseEvents\n    ? { ...globalCloseEvents }\n    : {\n        escape: closeOnEsc || false,\n        scroll: closeOnScroll || false,\n        resize: closeOnResize || false,\n        clickOutsideAnchor: hasClickEvent || false,\n      }\n\n  /**\n   * useLayoutEffect runs before useEffect,\n   * but should be used carefully because of caveats\n   * https://beta.reactjs.org/reference/react/useLayoutEffect#caveats\n   */\n  useIsomorphicLayoutEffect(() => {\n    mounted.current = true\n    return () => {\n      mounted.current = false\n    }\n  }, [])\n\n  const handleShow = (value: boolean) => {\n    if (!mounted.current) {\n      return\n    }\n    if (value) {\n      setRendered(true)\n    }\n    /**\n     * wait for the component to render and calculate position\n     * before actually showing\n     */\n    setTimeout(() => {\n      if (!mounted.current) {\n        return\n      }\n      setIsOpen?.(value)\n      if (isOpen === undefined) {\n        setShow(value)\n      }\n    }, 10)\n  }\n\n  /**\n   * this replicates the effect from `handleShow()`\n   * when `isOpen` is changed from outside\n   */\n  useEffect(() => {\n    if (isOpen === undefined) {\n      return () => null\n    }\n    if (isOpen) {\n      setRendered(true)\n    }\n    const timeout = setTimeout(() => {\n      setShow(isOpen)\n    }, 10)\n    return () => {\n      clearTimeout(timeout)\n    }\n  }, [isOpen])\n\n  useEffect(() => {\n    if (show === wasShowing.current) {\n      return\n    }\n    wasShowing.current = show\n    if (show) {\n      afterShow?.()\n    } else {\n      afterHide?.()\n    }\n  }, [show])\n\n  const handleShowTooltipDelayed = () => {\n    if (tooltipShowDelayTimerRef.current) {\n      clearTimeout(tooltipShowDelayTimerRef.current)\n    }\n\n    tooltipShowDelayTimerRef.current = setTimeout(() => {\n      handleShow(true)\n    }, delayShow)\n  }\n\n  const handleHideTooltipDelayed = (delay = delayHide) => {\n    if (tooltipHideDelayTimerRef.current) {\n      clearTimeout(tooltipHideDelayTimerRef.current)\n    }\n\n    tooltipHideDelayTimerRef.current = setTimeout(() => {\n      if (hoveringTooltip.current) {\n        return\n      }\n      handleShow(false)\n    }, delay)\n  }\n\n  const handleShowTooltip = (event?: Event) => {\n    if (!event) {\n      return\n    }\n    const target = (event.currentTarget ?? event.target) as HTMLElement | null\n    if (!target?.isConnected) {\n      /**\n       * this happens when the target is removed from the DOM\n       * at the same time the tooltip gets triggered\n       */\n      setActiveAnchor(null)\n      setProviderActiveAnchor({ current: null })\n      return\n    }\n    if (delayShow) {\n      handleShowTooltipDelayed()\n    } else {\n      handleShow(true)\n    }\n    setActiveAnchor(target)\n    setProviderActiveAnchor({ current: target })\n\n    if (tooltipHideDelayTimerRef.current) {\n      clearTimeout(tooltipHideDelayTimerRef.current)\n    }\n  }\n\n  const handleHideTooltip = () => {\n    if (clickable) {\n      // allow time for the mouse to reach the tooltip, in case there's a gap\n      handleHideTooltipDelayed(delayHide || 100)\n    } else if (delayHide) {\n      handleHideTooltipDelayed()\n    } else {\n      handleShow(false)\n    }\n\n    if (tooltipShowDelayTimerRef.current) {\n      clearTimeout(tooltipShowDelayTimerRef.current)\n    }\n  }\n\n  const handleTooltipPosition = ({ x, y }: IPosition) => {\n    const virtualElement = {\n      getBoundingClientRect() {\n        return {\n          x,\n          y,\n          width: 0,\n          height: 0,\n          top: y,\n          left: x,\n          right: x,\n          bottom: y,\n        }\n      },\n    } as Element\n    computeTooltipPosition({\n      place,\n      offset,\n      elementReference: virtualElement,\n      tooltipReference: tooltipRef.current,\n      tooltipArrowReference: tooltipArrowRef.current,\n      strategy: positionStrategy,\n      middlewares,\n      border,\n    }).then((computedStylesData) => {\n      if (Object.keys(computedStylesData.tooltipStyles).length) {\n        setInlineStyles(computedStylesData.tooltipStyles)\n      }\n      if (Object.keys(computedStylesData.tooltipArrowStyles).length) {\n        setInlineArrowStyles(computedStylesData.tooltipArrowStyles)\n      }\n      setActualPlacement(computedStylesData.place as PlacesType)\n    })\n  }\n\n  const handleMouseMove = (event?: Event) => {\n    if (!event) {\n      return\n    }\n    const mouseEvent = event as MouseEvent\n    const mousePosition = {\n      x: mouseEvent.clientX,\n      y: mouseEvent.clientY,\n    }\n    handleTooltipPosition(mousePosition)\n    lastFloatPosition.current = mousePosition\n  }\n\n  const handleClickOutsideAnchors = (event: MouseEvent) => {\n    const anchorById = document.querySelector<HTMLElement>(`[id='${anchorId}']`)\n    const anchors = [anchorById, ...anchorsBySelect]\n    if (anchors.some((anchor) => anchor?.contains(event.target as HTMLElement))) {\n      return\n    }\n    if (tooltipRef.current?.contains(event.target as HTMLElement)) {\n      return\n    }\n    handleShow(false)\n    if (tooltipShowDelayTimerRef.current) {\n      clearTimeout(tooltipShowDelayTimerRef.current)\n    }\n  }\n\n  // debounce handler to prevent call twice when\n  // mouse enter and focus events being triggered toggether\n  const debouncedHandleShowTooltip = debounce(handleShowTooltip, 50, true)\n  const debouncedHandleHideTooltip = debounce(handleHideTooltip, 50, true)\n  const updateTooltipPosition = useCallback(() => {\n    if (position) {\n      // if `position` is set, override regular and `float` positioning\n      handleTooltipPosition(position)\n      return\n    }\n\n    if (float) {\n      if (lastFloatPosition.current) {\n        /*\n          Without this, changes to `content`, `place`, `offset`, ..., will only\n          trigger a position calculation after a `mousemove` event.\n\n          To see why this matters, comment this line, run `yarn dev` and click the\n          \"Hover me!\" anchor.\n        */\n        handleTooltipPosition(lastFloatPosition.current)\n      }\n      // if `float` is set, override regular positioning\n      return\n    }\n\n    if (!activeAnchor?.isConnected) {\n      return\n    }\n\n    computeTooltipPosition({\n      place,\n      offset,\n      elementReference: activeAnchor,\n      tooltipReference: tooltipRef.current,\n      tooltipArrowReference: tooltipArrowRef.current,\n      strategy: positionStrategy,\n      middlewares,\n      border,\n    }).then((computedStylesData) => {\n      if (!mounted.current) {\n        // invalidate computed positions after remount\n        return\n      }\n      if (Object.keys(computedStylesData.tooltipStyles).length) {\n        setInlineStyles(computedStylesData.tooltipStyles)\n      }\n      if (Object.keys(computedStylesData.tooltipArrowStyles).length) {\n        setInlineArrowStyles(computedStylesData.tooltipArrowStyles)\n      }\n      setActualPlacement(computedStylesData.place as PlacesType)\n    })\n  }, [\n    show,\n    activeAnchor,\n    content,\n    externalStyles,\n    place,\n    offset,\n    positionStrategy,\n    position,\n    float,\n  ])\n\n  useEffect(() => {\n    const elementRefs = new Set(anchorRefs)\n\n    anchorsBySelect.forEach((anchor) => {\n      elementRefs.add({ current: anchor })\n    })\n\n    const anchorById = document.querySelector<HTMLElement>(`[id='${anchorId}']`)\n    if (anchorById) {\n      elementRefs.add({ current: anchorById })\n    }\n\n    const handleScrollResize = () => {\n      handleShow(false)\n    }\n\n    const anchorScrollParent = getScrollParent(activeAnchor)\n    const tooltipScrollParent = getScrollParent(tooltipRef.current)\n\n    if (actualGlobalCloseEvents.scroll) {\n      window.addEventListener('scroll', handleScrollResize)\n      anchorScrollParent?.addEventListener('scroll', handleScrollResize)\n      tooltipScrollParent?.addEventListener('scroll', handleScrollResize)\n    }\n    let updateTooltipCleanup: null | (() => void) = null\n    if (actualGlobalCloseEvents.resize) {\n      window.addEventListener('resize', handleScrollResize)\n    } else if (activeAnchor && tooltipRef.current) {\n      updateTooltipCleanup = autoUpdate(\n        activeAnchor as HTMLElement,\n        tooltipRef.current as HTMLElement,\n        updateTooltipPosition,\n        {\n          ancestorResize: true,\n          elementResize: true,\n          layoutShift: true,\n        },\n      )\n    }\n\n    const handleEsc = (event: KeyboardEvent) => {\n      if (event.key !== 'Escape') {\n        return\n      }\n      handleShow(false)\n    }\n    if (actualGlobalCloseEvents.escape) {\n      window.addEventListener('keydown', handleEsc)\n    }\n\n    if (actualGlobalCloseEvents.clickOutsideAnchor) {\n      window.addEventListener('click', handleClickOutsideAnchors)\n    }\n\n    const enabledEvents: { event: string; listener: (event?: Event) => void }[] = []\n\n    const handleClickOpenTooltipAnchor = (event?: Event) => {\n      if (show) {\n        return\n      }\n      handleShowTooltip(event)\n    }\n    const handleClickCloseTooltipAnchor = () => {\n      if (!show) {\n        return\n      }\n      handleHideTooltip()\n    }\n\n    const regularEvents = ['mouseenter', 'mouseleave', 'focus', 'blur']\n    const clickEvents = ['click', 'dblclick', 'mousedown', 'mouseup']\n\n    Object.entries(actualOpenEvents).forEach(([event, enabled]) => {\n      if (!enabled) {\n        return\n      }\n      if (regularEvents.includes(event)) {\n        enabledEvents.push({ event, listener: debouncedHandleShowTooltip })\n      } else if (clickEvents.includes(event)) {\n        enabledEvents.push({ event, listener: handleClickOpenTooltipAnchor })\n      } else {\n        // never happens\n      }\n    })\n\n    Object.entries(actualCloseEvents).forEach(([event, enabled]) => {\n      if (!enabled) {\n        return\n      }\n      if (regularEvents.includes(event)) {\n        enabledEvents.push({ event, listener: debouncedHandleHideTooltip })\n      } else if (clickEvents.includes(event)) {\n        enabledEvents.push({ event, listener: handleClickCloseTooltipAnchor })\n      } else {\n        // never happens\n      }\n    })\n\n    if (float) {\n      enabledEvents.push({\n        event: 'mousemove',\n        listener: handleMouseMove,\n      })\n    }\n\n    const handleMouseEnterTooltip = () => {\n      hoveringTooltip.current = true\n    }\n    const handleMouseLeaveTooltip = () => {\n      hoveringTooltip.current = false\n      handleHideTooltip()\n    }\n\n    if (clickable && !hasClickEvent) {\n      // used to keep the tooltip open when hovering content.\n      // not needed if using click events.\n      tooltipRef.current?.addEventListener('mouseenter', handleMouseEnterTooltip)\n      tooltipRef.current?.addEventListener('mouseleave', handleMouseLeaveTooltip)\n    }\n\n    enabledEvents.forEach(({ event, listener }) => {\n      elementRefs.forEach((ref) => {\n        ref.current?.addEventListener(event, listener)\n      })\n    })\n\n    return () => {\n      if (actualGlobalCloseEvents.scroll) {\n        window.removeEventListener('scroll', handleScrollResize)\n        anchorScrollParent?.removeEventListener('scroll', handleScrollResize)\n        tooltipScrollParent?.removeEventListener('scroll', handleScrollResize)\n      }\n      if (actualGlobalCloseEvents.resize) {\n        window.removeEventListener('resize', handleScrollResize)\n      } else {\n        updateTooltipCleanup?.()\n      }\n      if (actualGlobalCloseEvents.clickOutsideAnchor) {\n        window.removeEventListener('click', handleClickOutsideAnchors)\n      }\n      if (actualGlobalCloseEvents.escape) {\n        window.removeEventListener('keydown', handleEsc)\n      }\n      if (clickable && !hasClickEvent) {\n        tooltipRef.current?.removeEventListener('mouseenter', handleMouseEnterTooltip)\n        tooltipRef.current?.removeEventListener('mouseleave', handleMouseLeaveTooltip)\n      }\n      enabledEvents.forEach(({ event, listener }) => {\n        elementRefs.forEach((ref) => {\n          ref.current?.removeEventListener(event, listener)\n        })\n      })\n    }\n    /**\n     * rendered is also a dependency to ensure anchor observers are re-registered\n     * since `tooltipRef` becomes stale after removing/adding the tooltip to the DOM\n     */\n  }, [\n    activeAnchor,\n    updateTooltipPosition,\n    rendered,\n    anchorRefs,\n    anchorsBySelect,\n    // the effect uses the `actual*Events` objects, but this should work\n    openEvents,\n    closeEvents,\n    globalCloseEvents,\n    shouldOpenOnClick,\n  ])\n\n  useEffect(() => {\n    let selector = anchorSelect ?? ''\n    if (!selector && id) {\n      selector = `[data-tooltip-id='${id}']`\n    }\n    const documentObserverCallback: MutationCallback = (mutationList) => {\n      const newAnchors: HTMLElement[] = []\n      const removedAnchors: HTMLElement[] = []\n      mutationList.forEach((mutation) => {\n        if (mutation.type === 'attributes' && mutation.attributeName === 'data-tooltip-id') {\n          const newId = (mutation.target as HTMLElement).getAttribute('data-tooltip-id')\n          if (newId === id) {\n            newAnchors.push(mutation.target as HTMLElement)\n          }\n        }\n        if (mutation.type !== 'childList') {\n          return\n        }\n        if (activeAnchor) {\n          const elements = [...mutation.removedNodes].filter((node) => node.nodeType === 1)\n          if (selector) {\n            try {\n              removedAnchors.push(\n                // the element itself is an anchor\n                ...(elements.filter((element) =>\n                  (element as HTMLElement).matches(selector),\n                ) as HTMLElement[]),\n              )\n              removedAnchors.push(\n                // the element has children which are anchors\n                ...elements.flatMap(\n                  (element) =>\n                    [...(element as HTMLElement).querySelectorAll(selector)] as HTMLElement[],\n                ),\n              )\n            } catch {\n              /**\n               * invalid CSS selector.\n               * already warned on tooltip controller\n               */\n            }\n          }\n          elements.some((node) => {\n            if (node?.contains?.(activeAnchor)) {\n              setRendered(false)\n              handleShow(false)\n              setActiveAnchor(null)\n              if (tooltipShowDelayTimerRef.current) {\n                clearTimeout(tooltipShowDelayTimerRef.current)\n              }\n              if (tooltipHideDelayTimerRef.current) {\n                clearTimeout(tooltipHideDelayTimerRef.current)\n              }\n              return true\n            }\n            return false\n          })\n        }\n        if (!selector) {\n          return\n        }\n        try {\n          const elements = [...mutation.addedNodes].filter((node) => node.nodeType === 1)\n          newAnchors.push(\n            // the element itself is an anchor\n            ...(elements.filter((element) =>\n              (element as HTMLElement).matches(selector),\n            ) as HTMLElement[]),\n          )\n          newAnchors.push(\n            // the element has children which are anchors\n            ...elements.flatMap(\n              (element) =>\n                [...(element as HTMLElement).querySelectorAll(selector)] as HTMLElement[],\n            ),\n          )\n        } catch {\n          /**\n           * invalid CSS selector.\n           * already warned on tooltip controller\n           */\n        }\n      })\n      if (newAnchors.length || removedAnchors.length) {\n        setAnchorsBySelect((anchors) => [\n          ...anchors.filter((anchor) => !removedAnchors.includes(anchor)),\n          ...newAnchors,\n        ])\n      }\n    }\n    const documentObserver = new MutationObserver(documentObserverCallback)\n    // watch for anchor being removed from the DOM\n    documentObserver.observe(document.body, {\n      childList: true,\n      subtree: true,\n      attributes: true,\n      attributeFilter: ['data-tooltip-id'],\n    })\n    return () => {\n      documentObserver.disconnect()\n    }\n  }, [id, anchorSelect, activeAnchor])\n\n  useEffect(() => {\n    updateTooltipPosition()\n  }, [updateTooltipPosition])\n\n  useEffect(() => {\n    if (!contentWrapperRef?.current) {\n      return () => null\n    }\n    const contentObserver = new ResizeObserver(() => {\n      updateTooltipPosition()\n    })\n    contentObserver.observe(contentWrapperRef.current)\n    return () => {\n      contentObserver.disconnect()\n    }\n  }, [content, contentWrapperRef?.current])\n\n  useEffect(() => {\n    const anchorById = document.querySelector<HTMLElement>(`[id='${anchorId}']`)\n    const anchors = [...anchorsBySelect, anchorById]\n    if (!activeAnchor || !anchors.includes(activeAnchor)) {\n      /**\n       * if there is no active anchor,\n       * or if the current active anchor is not amongst the allowed ones,\n       * reset it\n       */\n      setActiveAnchor(anchorsBySelect[0] ?? anchorById)\n    }\n  }, [anchorId, anchorsBySelect, activeAnchor])\n\n  useEffect(() => {\n    return () => {\n      if (tooltipShowDelayTimerRef.current) {\n        clearTimeout(tooltipShowDelayTimerRef.current)\n      }\n      if (tooltipHideDelayTimerRef.current) {\n        clearTimeout(tooltipHideDelayTimerRef.current)\n      }\n    }\n  }, [])\n\n  useEffect(() => {\n    let selector = anchorSelect\n    if (!selector && id) {\n      selector = `[data-tooltip-id='${id}']`\n    }\n    if (!selector) {\n      return\n    }\n    try {\n      const anchors = Array.from(document.querySelectorAll<HTMLElement>(selector))\n      setAnchorsBySelect(anchors)\n    } catch {\n      // warning was already issued in the controller\n      setAnchorsBySelect([])\n    }\n  }, [id, anchorSelect])\n\n  const canShow = !hidden && content && show && Object.keys(inlineStyles).length > 0\n\n  return rendered ? (\n    <WrapperElement\n      id={id}\n      role=\"tooltip\"\n      className={classNames(\n        'react-tooltip',\n        coreStyles['tooltip'],\n        styles['tooltip'],\n        styles[variant],\n        className,\n        `react-tooltip__place-${actualPlacement}`,\n        coreStyles[canShow ? 'show' : 'closing'],\n        canShow ? 'react-tooltip__show' : 'react-tooltip__closing',\n        positionStrategy === 'fixed' && coreStyles['fixed'],\n        clickable && coreStyles['clickable'],\n      )}\n      onTransitionEnd={(event: TransitionEvent) => {\n        /**\n         * @warning if `--rt-transition-closing-delay` is set to 0,\n         * the tooltip will be stuck (but not visible) on the DOM\n         */\n        if (show || event.propertyName !== 'opacity') {\n          return\n        }\n        setRendered(false)\n      }}\n      style={{\n        ...externalStyles,\n        ...inlineStyles,\n        opacity: opacity !== undefined && canShow ? opacity : undefined,\n      }}\n      ref={tooltipRef}\n    >\n      {content}\n      <WrapperElement\n        className={classNames(\n          'react-tooltip-arrow',\n          coreStyles['arrow'],\n          styles['arrow'],\n          classNameArrow,\n          noArrow && coreStyles['noArrow'],\n        )}\n        style={{\n          ...inlineArrowStyles,\n          background: arrowColor\n            ? `linear-gradient(to right bottom, transparent 50%, ${arrowColor} 50%)`\n            : undefined,\n        }}\n        ref={tooltipArrowRef}\n      />\n    </WrapperElement>\n  ) : null\n}\n\nexport default Tooltip\n","/* eslint-disable react/no-danger */\nimport React from 'react'\nimport type { ITooltipContent } from './TooltipContentTypes'\n\nconst TooltipContent = ({ content }: ITooltipContent) => {\n  return <span dangerouslySetInnerHTML={{ __html: content }} />\n}\n\nexport default TooltipContent\n","import React, { useEffect, useRef, useState } from 'react'\nimport { Tooltip } from 'components/Tooltip'\nimport type {\n  EventsType,\n  PositionStrategy,\n  PlacesType,\n  VariantType,\n  WrapperType,\n  DataAttribute,\n  ITooltip,\n  ChildrenType,\n} from 'components/Tooltip/TooltipTypes'\nimport { useTooltip } from 'components/TooltipProvider'\nimport { TooltipContent } from 'components/TooltipContent'\nimport type { ITooltipController } from './TooltipControllerTypes'\n\nconst TooltipController = ({\n  id,\n  anchorId,\n  anchorSelect,\n  content,\n  html,\n  render,\n  className,\n  classNameArrow,\n  variant = 'dark',\n  place = 'top',\n  offset = 10,\n  wrapper = 'div',\n  children = null,\n  events = ['hover'],\n  openOnClick = false,\n  positionStrategy = 'absolute',\n  middlewares,\n  delayShow = 0,\n  delayHide = 0,\n  float = false,\n  hidden = false,\n  noArrow = false,\n  clickable = false,\n  closeOnEsc = false,\n  closeOnScroll = false,\n  closeOnResize = false,\n  openEvents,\n  closeEvents,\n  globalCloseEvents,\n  style,\n  position,\n  isOpen,\n  disableStyleInjection = false,\n  border,\n  opacity,\n  arrowColor,\n  setIsOpen,\n  afterShow,\n  afterHide,\n}: ITooltipController) => {\n  const [tooltipContent, setTooltipContent] = useState(content)\n  const [tooltipHtml, setTooltipHtml] = useState(html)\n  const [tooltipPlace, setTooltipPlace] = useState(place)\n  const [tooltipVariant, setTooltipVariant] = useState(variant)\n  const [tooltipOffset, setTooltipOffset] = useState(offset)\n  const [tooltipDelayShow, setTooltipDelayShow] = useState(delayShow)\n  const [tooltipDelayHide, setTooltipDelayHide] = useState(delayHide)\n  const [tooltipFloat, setTooltipFloat] = useState(float)\n  const [tooltipHidden, setTooltipHidden] = useState(hidden)\n  const [tooltipWrapper, setTooltipWrapper] = useState<WrapperType>(wrapper)\n  const [tooltipEvents, setTooltipEvents] = useState(events)\n  const [tooltipPositionStrategy, setTooltipPositionStrategy] = useState(positionStrategy)\n  const [activeAnchor, setActiveAnchor] = useState<HTMLElement | null>(null)\n  const styleInjectionRef = useRef(disableStyleInjection)\n  /**\n   * @todo Remove this in a future version (provider/wrapper method is deprecated)\n   */\n  const { anchorRefs, activeAnchor: providerActiveAnchor } = useTooltip(id)\n\n  const getDataAttributesFromAnchorElement = (elementReference: HTMLElement) => {\n    const dataAttributes = elementReference?.getAttributeNames().reduce((acc, name) => {\n      if (name.startsWith('data-tooltip-')) {\n        const parsedAttribute = name.replace(/^data-tooltip-/, '') as DataAttribute\n        acc[parsedAttribute] = elementReference?.getAttribute(name) ?? null\n      }\n      return acc\n    }, {} as Record<DataAttribute, string | null>)\n\n    return dataAttributes\n  }\n\n  const applyAllDataAttributesFromAnchorElement = (\n    dataAttributes: Record<string, string | null>,\n  ) => {\n    const handleDataAttributes: Record<DataAttribute, (value: string | null) => void> = {\n      place: (value) => {\n        setTooltipPlace((value as PlacesType) ?? place)\n      },\n      content: (value) => {\n        setTooltipContent(value ?? content)\n      },\n      html: (value) => {\n        setTooltipHtml(value ?? html)\n      },\n      variant: (value) => {\n        setTooltipVariant((value as VariantType) ?? variant)\n      },\n      offset: (value) => {\n        setTooltipOffset(value === null ? offset : Number(value))\n      },\n      wrapper: (value) => {\n        setTooltipWrapper((value as WrapperType) ?? wrapper)\n      },\n      events: (value) => {\n        const parsed = value?.split(' ') as EventsType[]\n        setTooltipEvents(parsed ?? events)\n      },\n      'position-strategy': (value) => {\n        setTooltipPositionStrategy((value as PositionStrategy) ?? positionStrategy)\n      },\n      'delay-show': (value) => {\n        setTooltipDelayShow(value === null ? delayShow : Number(value))\n      },\n      'delay-hide': (value) => {\n        setTooltipDelayHide(value === null ? delayHide : Number(value))\n      },\n      float: (value) => {\n        setTooltipFloat(value === null ? float : value === 'true')\n      },\n      hidden: (value) => {\n        setTooltipHidden(value === null ? hidden : value === 'true')\n      },\n    }\n    // reset unset data attributes to default values\n    // without this, data attributes from the last active anchor will still be used\n    Object.values(handleDataAttributes).forEach((handler) => handler(null))\n    Object.entries(dataAttributes).forEach(([key, value]) => {\n      handleDataAttributes[key as DataAttribute]?.(value)\n    })\n  }\n\n  useEffect(() => {\n    setTooltipContent(content)\n  }, [content])\n\n  useEffect(() => {\n    setTooltipHtml(html)\n  }, [html])\n\n  useEffect(() => {\n    setTooltipPlace(place)\n  }, [place])\n\n  useEffect(() => {\n    setTooltipVariant(variant)\n  }, [variant])\n\n  useEffect(() => {\n    setTooltipOffset(offset)\n  }, [offset])\n\n  useEffect(() => {\n    setTooltipDelayShow(delayShow)\n  }, [delayShow])\n\n  useEffect(() => {\n    setTooltipDelayHide(delayHide)\n  }, [delayHide])\n\n  useEffect(() => {\n    setTooltipFloat(float)\n  }, [float])\n\n  useEffect(() => {\n    setTooltipHidden(hidden)\n  }, [hidden])\n\n  useEffect(() => {\n    setTooltipPositionStrategy(positionStrategy)\n  }, [positionStrategy])\n\n  useEffect(() => {\n    if (styleInjectionRef.current === disableStyleInjection) {\n      return\n    }\n    if (process.env.NODE_ENV !== 'production') {\n      // eslint-disable-next-line no-console\n      console.warn('[react-tooltip] Do not change `disableStyleInjection` dynamically.')\n    }\n  }, [disableStyleInjection])\n\n  useEffect(() => {\n    if (typeof window !== 'undefined') {\n      window.dispatchEvent(\n        new CustomEvent('react-tooltip-inject-styles', {\n          detail: {\n            disableCore: disableStyleInjection === 'core',\n            disableBase: disableStyleInjection,\n          },\n        }),\n      )\n    }\n  }, [])\n\n  useEffect(() => {\n    const elementRefs = new Set(anchorRefs)\n\n    let selector = anchorSelect\n    if (!selector && id) {\n      selector = `[data-tooltip-id='${id}']`\n    }\n    if (selector) {\n      try {\n        const anchorsBySelect = document.querySelectorAll<HTMLElement>(selector)\n        anchorsBySelect.forEach((anchor) => {\n          elementRefs.add({ current: anchor })\n        })\n      } catch {\n        if (!process.env.NODE_ENV || process.env.NODE_ENV !== 'production') {\n          // eslint-disable-next-line no-console\n          console.warn(`[react-tooltip] \"${selector}\" is not a valid CSS selector`)\n        }\n      }\n    }\n\n    const anchorById = document.querySelector<HTMLElement>(`[id='${anchorId}']`)\n    if (anchorById) {\n      elementRefs.add({ current: anchorById })\n    }\n\n    if (!elementRefs.size) {\n      return () => null\n    }\n\n    const anchorElement = activeAnchor ?? anchorById ?? providerActiveAnchor.current\n\n    const observerCallback: MutationCallback = (mutationList) => {\n      mutationList.forEach((mutation) => {\n        if (\n          !anchorElement ||\n          mutation.type !== 'attributes' ||\n          !mutation.attributeName?.startsWith('data-tooltip-')\n        ) {\n          return\n        }\n        // make sure to get all set attributes, since all unset attributes are reset\n        const dataAttributes = getDataAttributesFromAnchorElement(anchorElement)\n        applyAllDataAttributesFromAnchorElement(dataAttributes)\n      })\n    }\n\n    // Create an observer instance linked to the callback function\n    const observer = new MutationObserver(observerCallback)\n\n    // do not check for subtree and childrens, we only want to know attribute changes\n    // to stay watching `data-attributes-*` from anchor element\n    const observerConfig = { attributes: true, childList: false, subtree: false }\n\n    if (anchorElement) {\n      const dataAttributes = getDataAttributesFromAnchorElement(anchorElement)\n      applyAllDataAttributesFromAnchorElement(dataAttributes)\n      // Start observing the target node for configured mutations\n      observer.observe(anchorElement, observerConfig)\n    }\n\n    return () => {\n      // Remove the observer when the tooltip is destroyed\n      observer.disconnect()\n    }\n  }, [anchorRefs, providerActiveAnchor, activeAnchor, anchorId, anchorSelect])\n\n  useEffect(() => {\n    if (process.env.NODE_ENV === 'production') {\n      return\n    }\n    if (style?.border) {\n      // eslint-disable-next-line no-console\n      console.warn('[react-tooltip] Do not set `style.border`. Use `border` prop instead.')\n    }\n    if (border && !CSS.supports('border', `${border}`)) {\n      // eslint-disable-next-line no-console\n      console.warn(`[react-tooltip] \"${border}\" is not a valid \\`border\\`.`)\n    }\n    if (style?.opacity) {\n      // eslint-disable-next-line no-console\n      console.warn('[react-tooltip] Do not set `style.opacity`. Use `opacity` prop instead.')\n    }\n    if (opacity && !CSS.supports('opacity', `${opacity}`)) {\n      // eslint-disable-next-line no-console\n      console.warn(`[react-tooltip] \"${opacity}\" is not a valid \\`opacity\\`.`)\n    }\n  }, [])\n\n  /**\n   * content priority: children < render or content < html\n   * children should be lower priority so that it can be used as the \"default\" content\n   */\n  let renderedContent: ChildrenType = children\n  const contentWrapperRef = useRef<HTMLDivElement>(null)\n  if (render) {\n    const rendered = render({ content: tooltipContent ?? null, activeAnchor }) as React.ReactNode\n    renderedContent = rendered ? (\n      <div ref={contentWrapperRef} className=\"react-tooltip-content-wrapper\">\n        {rendered}\n      </div>\n    ) : null\n  } else if (tooltipContent) {\n    renderedContent = tooltipContent\n  }\n  if (tooltipHtml) {\n    renderedContent = <TooltipContent content={tooltipHtml} />\n  }\n\n  const props: ITooltip = {\n    id,\n    anchorId,\n    anchorSelect,\n    className,\n    classNameArrow,\n    content: renderedContent,\n    contentWrapperRef,\n    place: tooltipPlace,\n    variant: tooltipVariant,\n    offset: tooltipOffset,\n    wrapper: tooltipWrapper,\n    events: tooltipEvents,\n    openOnClick,\n    positionStrategy: tooltipPositionStrategy,\n    middlewares,\n    delayShow: tooltipDelayShow,\n    delayHide: tooltipDelayHide,\n    float: tooltipFloat,\n    hidden: tooltipHidden,\n    noArrow,\n    clickable,\n    closeOnEsc,\n    closeOnScroll,\n    closeOnResize,\n    openEvents,\n    closeEvents,\n    globalCloseEvents,\n    style,\n    position,\n    isOpen,\n    border,\n    opacity,\n    arrowColor,\n    setIsOpen,\n    afterShow,\n    afterHide,\n    activeAnchor,\n    setActiveAnchor: (anchor: HTMLElement | null) => setActiveAnchor(anchor),\n  }\n\n  return <Tooltip {...props} />\n}\n\nexport default TooltipController\n","import './tokens.css'\n\nimport { injectStyle } from 'utils/handle-style'\n\nimport type {\n  ChildrenType,\n  DataAttribute,\n  EventsType,\n  PlacesType,\n  PositionStrategy,\n  VariantType,\n  WrapperType,\n  IPosition,\n  Middleware,\n} from './components/Tooltip/TooltipTypes'\nimport type { ITooltipController } from './components/TooltipController/TooltipControllerTypes'\nimport type { ITooltipWrapper } from './components/TooltipProvider/TooltipProviderTypes'\n\n// those content will be replaced in build time with the `react-tooltip.css` builded content\nconst TooltipCoreStyles = 'react-tooltip-core-css-placeholder'\nconst TooltipStyles = 'react-tooltip-css-placeholder'\n\nif (typeof window !== 'undefined') {\n  window.addEventListener('react-tooltip-inject-styles', ((\n    event: CustomEvent<{ disableCore: boolean; disableBase: boolean }>,\n  ) => {\n    if (!event.detail.disableCore) {\n      injectStyle({ css: TooltipCoreStyles, type: 'core' })\n    }\n    if (!event.detail.disableBase) {\n      injectStyle({ css: TooltipStyles, type: 'base' })\n    }\n  }) as EventListener)\n}\n\nexport { TooltipController as Tooltip } from './components/TooltipController'\nexport { TooltipProvider, TooltipWrapper } from './components/TooltipProvider'\nexport type {\n  ChildrenType,\n  DataAttribute,\n  EventsType,\n  PlacesType,\n  PositionStrategy,\n  VariantType,\n  WrapperType,\n  ITooltipController as ITooltip,\n  ITooltipWrapper,\n  IPosition,\n  Middleware,\n}\n\nexport { removeStyle } from './utils/handle-style'\n"],"names":["REACT_TOOLTIP_CORE_STYLES_ID","REACT_TOOLTIP_BASE_STYLES_ID","injected","core","base","injectStyle","css","id","type","ref","document","process","_a","env","REACT_TOOLTIP_DISABLE_CORE_STYLES","_b","REACT_TOOLTIP_DISABLE_BASE_STYLES","insertAt","getElementById","console","warn","head","getElementsByTagName","style","createElement","firstChild","insertBefore","appendChild","styleSheet","cssText","createTextNode","removeStyle","tagName","remove","debounce","func","wait","immediate","timeout","args","later","apply","this","setTimeout","clearTimeout","DEFAULT_TOOLTIP_ID","DEFAULT_CONTEXT_DATA","anchorRefs","Set","activeAnchor","current","attach","detach","setActiveAnchor","TooltipContext","createContext","getTooltipData","TooltipProvider","children","anchorRefMap","setAnchorRefMap","useState","activeAnchorMap","setActiveAnchorMap","tooltipId","refs","oldMap","tooltipRefs","forEach","add","delete","useCallback","context","useMemo","React","Provider","value","useTooltip","useContext","TooltipWrapper","className","place","content","html","variant","offset","wrapper","events","positionStrategy","delayShow","delayHide","anchorRef","useRef","useEffect","classNames","useIsomorphicLayoutEffect","window","useLayoutEffect","isScrollable","node","HTMLElement","SVGElement","getComputedStyle","some","propertyName","getPropertyValue","getScrollParent","currentParent","parentElement","scrollingElement","documentElement","computeTooltipPosition","async","elementReference","tooltipReference","tooltipArrowReference","offsetValue","strategy","middlewares","Number","flip","shift","padding","border","tooltipStyles","tooltipArrowStyles","middleware","push","arrow","element","computePosition","placement","then","x","y","middlewareData","styles","left","top","arrowX","arrowY","staticSide","right","bottom","split","borderSide","borderBottom","borderRight","borderWidth","match","Tooltip","classNameArrow","anchorId","anchorSelect","openOnClick","WrapperElement","float","hidden","noArrow","clickable","closeOnEsc","closeOnScroll","closeOnResize","openEvents","closeEvents","globalCloseEvents","externalStyles","position","afterShow","afterHide","contentWrapperRef","isOpen","setIsOpen","opacity","arrowColor","tooltipRef","tooltipArrowRef","tooltipShowDelayTimerRef","tooltipHideDelayTimerRef","actualPlacement","setActualPlacement","inlineStyles","setInlineStyles","inlineArrowStyles","setInlineArrowStyles","show","setShow","rendered","setRendered","wasShowing","lastFloatPosition","setProviderActiveAnchor","hoveringTooltip","anchorsBySelect","setAnchorsBySelect","mounted","shouldOpenOnClick","includes","hasClickEvent","click","dblclick","mousedown","actualOpenEvents","mouseenter","focus","Object","assign","actualCloseEvents","mouseleave","blur","actualGlobalCloseEvents","escape","scroll","resize","clickOutsideAnchor","handleShow","undefined","handleHideTooltipDelayed","delay","handleShowTooltip","event","target","currentTarget","isConnected","handleHideTooltip","handleTooltipPosition","getBoundingClientRect","width","height","computedStylesData","keys","length","handleMouseMove","mouseEvent","mousePosition","clientX","clientY","handleClickOutsideAnchors","querySelector","anchor","contains","debouncedHandleShowTooltip","debouncedHandleHideTooltip","updateTooltipPosition","elementRefs","anchorById","handleScrollResize","anchorScrollParent","tooltipScrollParent","addEventListener","updateTooltipCleanup","autoUpdate","ancestorResize","elementResize","layoutShift","handleEsc","key","enabledEvents","handleClickOpenTooltipAnchor","handleClickCloseTooltipAnchor","regularEvents","clickEvents","entries","enabled","listener","handleMouseEnterTooltip","handleMouseLeaveTooltip","removeEventListener","selector","documentObserver","MutationObserver","mutationList","newAnchors","removedAnchors","mutation","attributeName","getAttribute","elements","removedNodes","filter","nodeType","matches","flatMap","querySelectorAll","call","addedNodes","anchors","observe","body","childList","subtree","attributes","attributeFilter","disconnect","contentObserver","ResizeObserver","Array","from","canShow","role","coreStyles","onTransitionEnd","background","TooltipContent","dangerouslySetInnerHTML","__html","TooltipController","render","disableStyleInjection","tooltipContent","setTooltipContent","tooltipHtml","setTooltipHtml","tooltipPlace","setTooltipPlace","tooltipVariant","setTooltipVariant","tooltipOffset","setTooltipOffset","tooltipDelayShow","setTooltipDelayShow","tooltipDelayHide","setTooltipDelayHide","tooltipFloat","setTooltipFloat","tooltipHidden","setTooltipHidden","tooltipWrapper","setTooltipWrapper","tooltipEvents","setTooltipEvents","tooltipPositionStrategy","setTooltipPositionStrategy","styleInjectionRef","providerActiveAnchor","getDataAttributesFromAnchorElement","getAttributeNames","reduce","acc","name","startsWith","replace","applyAllDataAttributesFromAnchorElement","dataAttributes","handleDataAttributes","parsed","values","handler","dispatchEvent","CustomEvent","detail","disableCore","disableBase","size","anchorElement","observer","observerConfig","CSS","supports","renderedContent","props"],"mappings":"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"}